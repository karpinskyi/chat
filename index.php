<?php  //header("Content-Type: text/html; charset=utf-8");

//! отображение ошибок
error_reporting (E_ALL);

// файл конфигурации
include ('config.php');

// подключение ядра
include (SITE_PATH . 'core' . DS . 'core.php');


// запуск роутера
$router = new Router();
//$router->setPath (SITE_PATH . 'controllers');
$router->run();


/*

Соединение с БД уязвимое. Сделал самые простые запросы для примера. 
Пользователь при логине создает в БД строку session, сейчас туда записывается простое случайное число. Не знаю что безопаснее использовать - или идентификатор сессии или что то другое уникальное..
админ может заходить в любые комнаты и удалять сообщения и комнаты.
пользователь может заходить в открытые комнаты и создавать их - это те, которые созданны без пароля. или может ввести пароль и стать участником закрытой комнаты.
Так же любой пользователь может создавать сакрытые комнаты - просто надо при создании ввести пароль.


сообщения между пользователями отсылаются напрямую. Не создается отдельных каналов. Даже админ не имеет к ним доступа. В таблице сообщений есть отдельный столбец, там указывается кому адресованно сообщение(id пользователя). 
А вот столбец с именем принимающего сообщения пользователя вспомогательный - для того чтобы не обращаться каждый раз к другой таблице(за ником) и не нагружать БД. можно вообще удалить этот столбец(подправив php код).

администраторы чата указываются в config.php в виде массива из id пользователей

комнаты, которые выведенны в меню, зарезервированны в массиве в config.php - это для того, чтобы в адресной строке высвечивался красивый адрес.

Если пользователь не вошел или не имеет доступа, то просмотреть сообщения не сможет, т.к. информация о нем извлекается из переменной $_SESSION, которая находится на сервере - это и есть защита. Даже если пользователь знает все id таблиц и сообщений - он не сможет прочитать сообщения если это не разрешенно.
Уязвимость  - это запросы к БД, ну об этом я писал в начале.

div.content специально кривой, чтобы были видны php ошибки(когда писал код), т.к. чат обновляется и не получалось их прочитать + резиновая верстка. Дизайн не делал. Вообще хорошая верстка занимает много времени и очень сильно отвлекает от самого кода. Набросал минимум css для отображения.

на все про все chat занял у меня полтора дня.

Сейчас делаю сложный проект, связанный с картографией(под ключ). Возможно паралльельно возьмусь за изучение yii2. Вообщ планировал после, но не хочу сильно откладывать yii - еще java на очереди.


*/









/*       // ЧТЕНИЕ
$run = new Model_Mapsearch;
$run->table = 'estate';
$run->in = array( 'aa*max'=>'1000');
$run->out = array('id','');
$run->sorting = 'price';
$run->sorting_up = 'up';
$run->page = array('1','10');
$run->read();
echo $run->query . '<br>';
print_r($run->result); 

*/


 /*     // ЗАПИСЬ || РЕДАКТИРОВАНИЕ
$run = new Model_Mapsearch;
$run->table = 'es';
$run->in = array('id'=>'15','foto'=>'http://none');
$run->record();
print_r($run->result);
*/

/*
          //УДАЛЕНИЕ
$run = new Model_Mapsearch;
$run->table = 'es';
$run->in = array('id'=>'42',''=>'');
$run->delete();
print_r($run->result);
*/










/*
Написать чат с обновлением в реальном времени (с использованием PHP / MySQL / AJAX).
Реализовать оформление при помощи Bootstrap (или любого другого известного тебе CSS фреймворка)

1. Вручную создать трёх пользователей:  двух обычных и одного администратора.
1.1. Администратор: может отправлять, удалять и просматривать все сообщения, а также создавать каналы
1.2. Пользователь: может видеть только свои, и адресованные ему или всем сообщения, а также отправлять их.
2. Создать мини-форму авторизации пользователей чата (валидация не обязательна).
3. В чате должно быть реализовано создание и переключение между каналами , а также приватные переписки. (уточнения по этому пункту:
Канал - это как отдельная комната (чат-комната) , ветка где общаются отдельные пользователи , плюс реализована возможность общаться 1 на 1.
Пусть Админ имеет право создавать, удалять и управлять этими каналами.)


В случае использования PHP фреймворков, рекомендуется реализовать все используя REST API и JSON обмен данными.

Бонусные задания:

1. Релизовать регистрацию новых пользователей.
2. Реализовать проверку вводимых данных при регистрации и авторизации.
___________________________________________________________________________

* - Оценивается не быстрота написания, а качество и безопасность вашего кода.
* - проект и дамп базы должны быть залиты в github репозиторий. (нам ссылку для проверки кода)

(050)545-22-59 Вадим
http://matematica.com.ua/ 
просьба отписаться в любом случае и сообщить о своем результате

*/


